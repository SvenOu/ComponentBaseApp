apply plugin: 'com.android.application'

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api project(':Project_Module:module_security')
    api project(':Project_Module:module_guest')
    api project(':Project_lib:lib_zxing_android_embedded')
    api "${androidSupportConstraintLayout}"
}
android {
    println "---开始加载module_application配置文件---"
    def fileProvide = guestProps['app.FACEBOOK_APP_ID']+guestProps['app.FILE_PROVIDE']
    def testManifestPlaceholders = [
            UMENG_APP_KEY   : guestProps['app.UMENG_APP_KEY'],
            UMENG_CHANNEL   : guestProps['app.UMENG_CHANNEL'],
            FACEBOOK_APP_ID : guestProps['app.FACEBOOK_APP_ID'],
            FABRIC_APIKEY   : guestProps['app.FABRIC_APIKEY'],
            //for test
            GETUI_APP_ID    : guestProps['app.TEST_GETUI_APP_ID'],
            GETUI_APP_KEY   : guestProps['app.TEST_GETUI_APP_KEY'],
            GETUI_APP_SECRET: guestProps['app.TEST_GETUI_APP_SECRET'],

            PACKAGE_NAME    : guestProps['app.PACKAGE_NAME'],
            FILE_PROVIDE    : fileProvide
    ]
    def proManifestPlaceholders = [
            UMENG_APP_KEY   : guestProps['app.UMENG_APP_KEY'],
            UMENG_CHANNEL   : guestProps['app.UMENG_CHANNEL'],
            FACEBOOK_APP_ID : guestProps['app.FACEBOOK_APP_ID'],
            FABRIC_APIKEY   : guestProps['app.FABRIC_APIKEY'],
            //for pro
            GETUI_APP_ID    : guestProps['app.PRO_GETUI_APP_ID'],
            GETUI_APP_KEY   : guestProps['app.PRO_GETUI_APP_KEY'],
            GETUI_APP_SECRET: guestProps['app.PRO_GETUI_APP_SECRET'],

            PACKAGE_NAME    : guestProps['app.PACKAGE_NAME'],
            FILE_PROVIDE    : fileProvide
    ]
    def localManifestPlaceholders = [
            UMENG_APP_KEY   : guestProps['app.UMENG_APP_KEY'],
            UMENG_CHANNEL   : guestProps['app.UMENG_CHANNEL'],
            FACEBOOK_APP_ID : guestProps['app.FACEBOOK_APP_ID'],
            FABRIC_APIKEY   : guestProps['app.FABRIC_APIKEY'],
            //for dev
            GETUI_APP_ID    : guestProps['app.DEV_GETUI_APP_ID'],
            GETUI_APP_KEY   : guestProps['app.DEV_GETUI_APP_KEY'],
            GETUI_APP_SECRET: guestProps['app.DEV_GETUI_APP_SECRET'],

            PACKAGE_NAME    : guestProps['app.PACKAGE_NAME'],
            FILE_PROVIDE    : fileProvide
    ]

    compileSdkVersion "${buildVars.compileSdkVersion}".toInteger()
    buildToolsVersion "${buildVars.buildToolsVersion}"
    defaultConfig {
        applicationId  guestProps['app.PACKAGE_NAME']
        minSdkVersion "${buildVars.minSdkVersion}".toInteger()
        targetSdkVersion "${buildVars.targetSdkVersion}".toInteger()
        versionCode guestProps['app.versionCode'].toInteger()
        versionName guestProps['app.versionName']
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        signConfig {
            keyAlias guestProps['app.KEY_ALIAS']
            keyPassword guestProps['app.KEY_PASSWORD']
            storeFile file(guestProps['app.STORE_FILE'])
            storePassword guestProps['app.STORE_PASSWORD']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.signConfig
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signConfig
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def newName = output.outputFile.name
                    if (newName.contains('-release')) {
                        def formattedDate = new Date().format('yyyy-MM-dd_HHmmss')
                        def buildModel = 'local'
                        if (newName.contains('-TEST')) {
                            buildModel = 'test'
                        }else if(newName.contains('-PROD')){
                            buildModel = 'live'
                        }else if(newName.contains('-CURRENT_SELECT')){
                            buildModel = 'develop_temp_' + guestProps['app.currentMode'].toString().replaceAll("\"","");
                        }
                        newName = "Churchs_" + buildModel + "_v" + guestProps['app.versionName']  + "b0"+"_" + formattedDate + ".apk"
                    }
                    outputFileName = newName;
                }
            }
        }
    }

    flavorDimensions "default"
    productFlavors {
        CURRENT_SELECT{
            dimension "default"
        }
        DEV{
            dimension "default"
            println "\n---------------- productFlavors DEV start ---------"
            buildConfigField 'String', 'CURRENT_MODE', guestProps['app.DEV_MODE']
            manifestPlaceholders = localManifestPlaceholders
            println "----------------GETUI_APP_ID---------" + guestProps['app.DEV_GETUI_APP_ID'] + "------------------"
            println "----------------GETUI_APP_KEY---------" + guestProps['app.DEV_GETUI_APP_KEY'] + "------------------"
            println "----------------GETUI_APP_SECRET---------" + guestProps['app.DEV_GETUI_APP_SECRET'] + "------------------"
            println "---------------- productFlavors DEV end ---------"
        }
        TEST{
            dimension "default"
            println "\n---------------- productFlavors TEST start ---------"
            buildConfigField 'String', 'CURRENT_MODE', guestProps['app.TEST_MODE']
            manifestPlaceholders = testManifestPlaceholders
            println "----------------GETUI_APP_ID---------" + guestProps['app.TEST_GETUI_APP_ID'] + "------------------"
            println "----------------GETUI_APP_KEY---------" + guestProps['app.TEST_GETUI_APP_KEY'] + "------------------"
            println "----------------GETUI_APP_SECRET---------" + guestProps['app.TEST_GETUI_APP_SECRET'] + "------------------"
            println "---------------- productFlavors TEST end ---------"
        }
        PROD{
            dimension "default"
            println "\n---------------- productFlavors PROD start ---------"
            buildConfigField 'String', 'CURRENT_MODE', guestProps['app.PROD_MODE']
            manifestPlaceholders = proManifestPlaceholders
            println "----------------GETUI_APP_ID---------" + guestProps['app.PRO_GETUI_APP_ID'] + "------------------"
            println "----------------GETUI_APP_KEY---------" + guestProps['app.PRO_GETUI_APP_KEY'] + "------------------"
            println "----------------GETUI_APP_SECRET---------" + guestProps['app.PRO_GETUI_APP_SECRET'] + "------------------"
            println "---------------- productFlavors PROD end ---------"
        }
    }

}

